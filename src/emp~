
int AB_Create(struct ab_tree *tree,unsigned int a,unsigned int b)
{
  tree->a=a;
  tree->b=b;
  tree->num_inner_nodes=0;
  tree->num_leaves=0;
  //Create and Set Root
  struct ab_inner_node *root=AB_Inner_Node_Create();
  tree->root=root;
}

struct ab_inner_node* AB_Inner_Node_Create(struct ab_tree *tree)
{
  //Allocate memory for the node and its children
  struct ab_inner_node *tree_node=malloc(sizeof(struct ab_inner_node));
  tree_node->children=malloc(sizeof(struct magic_id)*tree->b);
  //We added a new node update tree info
  tree->num_inner_nodes++;
  //Initialize node values
  tree_node->length=0;
  tree_node->BID=tree->num_inner_nodes+tree->num_leaves;
  return tree_node;
}

struct ab_leaf* AB_Leaf_Create(struct ab_tree *tree)
{
  struct ab_leaf* tree_leaf=malloc(sizeof(struct ab_leaf));
  tree_leaf->data=malloc(sizeof(struct data_type));
  //We added a new leaf update tree info
  tree->num_leaves++;
  //Initialize leaf values
  tree_leaf->length=0;
  tree_leaf->BID=tree->num_inner_nodes+tree->num_leaves;
  return tree_leaf;
}

int  AB_Insert(struct ab_tree *tree,struct data_type data)
{
  /*
  //Corner Case Tree is empty
  if(tree->num_leaves==0)
    {
      //Create a new leaf
      struct ab_leaf *new_leaf=AB_Leaf_Create(tree);
      //Update root info
      tree->root->length++;
      //Attach it to the root
      tree->root->children[0].r_d=RAM;
      tree->root->children[0].n_t=LEAF;
      tree->root->children[0].block_id=new_leaf->BID;
      tree->root->children[0].divider=data;
      tree->root->children[0].address=new_leaf;
      //
    }
  else
    {
  AB_Inner_Insert(tree,tree->root,NULL,data);
  }*/
  
}

/*
static int AB_Inner_Insert(struct ab_tree *tree,struct ab_inner_node *tn,struct ab_inner_node *tn_parent,struct data_type data)
{


}
*/




void print_node_stats(struct ab_inner_node *tn)
{
  printf("Node Address: %p\n",tn);
  printf( "Node Block ID: %zu\n",tn->BID);
  printf("Node Num Elements: %zu\n",tn->length);
  for(size_t i=0;i<tn->length;i++)
    {
      printf("Child %zu Block ID: %zu\n",tn->children[i].block_id);
      printf("Child %zu Location: %c\n",tn->children[i].r_d);
      printf("Child %zu Node Type: %c\n",tn->children[i].n_t);
      printf("Child %zu Adress: %p\n",tn->children[i].address);
    }
}

